[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/sdk/Desktop/my_scalation_2.0/src/main/scala/my_scalation/DiceTest.scala","languageId":"scala","version":1,"text":"\npackage my_scalation\n\nimport scalation.mathstat._\nimport scalation.random.Randi\n\n// > runMain my_scalation.DiceTest\n\nobject DiceTest extends App:\n\n    val dice = Randi (1, 6)\n    val x    = VectorD.range (0, 13)\n    val freq = new VectorD (13)\n    for i <- 0 until 10000 do\n        val sum = dice.igen + dice.igen\n        freq(sum) += 1\n    end for\n    new Plot (x, freq)\n\nend DiceTest \n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/Users/sdk/Desktop/my_scalation_2.0/target/scala-3.1.0/zinc/inc_compile_3.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Jan 31, 2022, 5:02:55 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/sdk/Desktop/my_scalation_2.0/project/project/metals.sbt","languageId":"scala","version":1,"text":"// DO NOT EDIT! This file is auto-generated.\n\n// This file enables sbt-bloop to create bloop config files.\n\naddSbtPlugin(\"ch.epfl.scala\" % \"sbt-bloop\" % \"1.4.12\")\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///Users/sdk/Desktop/my_scalation_2.0/project/project/metals.sbt"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/sdk/Desktop/my_scalation_2.0/src/main/scala/my_scalation/ConfidenceIntervalTest.scala","languageId":"scala","version":1,"text":"\npackage my_scalation\n\nimport scala.math.sqrt\n\nimport scalation._\nimport scalation.mathstat._\nimport scalation.random._\n\n// > runMain my_scalation.ConfidenceIntervalTest\n\nobject ConfidenceIntervalTest extends App:\n\n    val (mu, sig) = (70.0, 8.0)                               // population mean and standard deviation\n    val m   = 100                                             // sample size\n    val rm  = sqrt (m)\n    val rvg = Normal (mu, sig * sig)                          // Normal random variate generator\n    var count_z, count_t = 0\n\n    for it <- 1 to 100 do                                     // test several datasets\n        val y = VectorD (for i <- 0 until m yield rvg.gen)    // sample from Normal distribution\n        val (mu_, sig_) = (y.mean, y.stdev)                   // sample mean and standard deviation\n\n        val ihw_z = z_sigma (sig_) / rm                       // interval half width: z-distribution\n        val ci_z  = (mu_ - ihw_z, mu_ + ihw_z)                // z-confidence interval\n        println (s\"mu = $mu in ci_z = $ci_z?\")\n        if mu in ci_z then count_z += 1\n\n        val ihw_t = t_sigma (sig_, m-1) / rm                  // interval half width: t-distribution\n        val ci_t  = (mu_ - ihw_t, mu_ + ihw_t)                // z-confidence interval\n        println (s\"mu = $mu in ci_t = $ci_t?\")\n        if mu in ci_t then count_t += 1\n    end for\n\n    println (s\"mu inside $count_z % z-confidence intervals\")\n    println (s\"mu inside $count_t % t-confidence intervals\")\n\nend ConfidenceIntervalTest\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///Users/sdk/Desktop/my_scalation_2.0/src/main/scala/my_scalation/ConfidenceIntervalTest.scala"},"position":{"line":6,"character":0}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line: import scalation.mathstat._[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: $/cancelRequest: JsonRpcNotificationMessage(2.0, $/cancelRequest, {"id":1})[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition json request: {"textDocument":{"uri":"file:///Users/sdk/Desktop/my_scalation_2.0/src/main/scala/my_scalation/ConfidenceIntervalTest.scala"},"position":{"line":6,"character":0}}[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition found line: import scalation.mathstat._[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol impor[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0msymbol impor[0m
[0m[[0m[0mdebug[0m] [0m[0mlsp-definition locations Vector()[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///Users/sdk/Desktop/my_scalation_2.0/src/main/scala/my_scalation/ConfidenceIntervalTest.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/sdk/Desktop/my_scalation_2.0/build.sbt","languageId":"scala","version":1,"text":"\nlazy val my_scalation = project.in(file(\".\"))\n  .settings(\n    scalaVersion  := \"3.1.0\",\n//  scalacOptions += \"-deprecation\",\n//  javacOptions  += \"--add-modules jdk.incubator.vector\"\n  )\n\nfork := true\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///Users/sdk/Desktop/my_scalation_2.0/build.sbt"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/sdk/Desktop/my_scalation_2.0/src/main/scala/my_scalation/Ex_Bank.scala","languageId":"scala","version":1,"text":"\n//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n/** @author  John Miller\n *  @version 2.0\n *  @date    Wed Dec 30 14:48:41 EST 2009\n *  @see     LICENSE (MIT style license file).\n *\n *  @title   Example Model: Bank - Event-Scheduling\n */\n\npackage my_scalation\n\nimport scalation.mathstat.Statistic\nimport scalation.random.Exponential\nimport scalation.random.RandomSeeds.N_STREAMS\nimport scalation.simulation.event._\n\n//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n/** The `runEx_Bank` function is used to launch the `BankModel` class.\n *  > runMain my_scalation.runEx_Bank\n */\n@main def runEx_Bank (): Unit = new BankModel () \n\n\n//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n/** The `BankModel` class defines a simple Event-Scheduling model of a Bank where\n *  service is provided by one teller and models an M/M/1 queue.\n *  @param name    the name of the simulation model\n *  @param reps    the number of independent replications to run\n *  @param nStop   the number arrivals before stopping\n *  @param stream  the base random number stream (0 to 999)\n */\nclass BankModel (name: String = \"Bank\", reps: Int = 1, nStop: Int = 100, stream: Int = 0)\n      extends Model (name, reps):\n\n    //--------------------------------------------------\n    // Initialize Model Constants\n\n    val lambda = 6.0                                  // customer arrival rate (per hr)\n    val mu     = 7.5                                  // customer service rate (per hr)\n\n    //--------------------------------------------------\n    // Create Random Variables (RVs)\n\n    val HOUR       = 60.0\n    val iArrivalRV = Exponential (HOUR / lambda, stream)\n    val serviceRV  = Exponential (HOUR / mu, (stream + 1) % N_STREAMS)\n\n    //--------------------------------------------------\n    // Create State Variables\n\n    var nArr      = 0.0                               // number of customers that have arrived\n    var nIn       = 0.0                               // number of customers in the bank\n    var nOut      = 0.0                               // number of customers that finished & left\n\n    val t_ia_stat = new Statistic (\"t_ia\")            // time between Arrivals statistics\n    val t_s_stat  = new Statistic (\"t_s\")             // time in Service statistics\n    val waitQueue = WaitQueue (this)                  // waiting queue that collects stats\n    addStats (t_ia_stat, t_s_stat)\n\n    //--------------------------------------------------\n    // Specify Logic for each Type of Simulation Event\n\n    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n    /** `Arrival` is a subclass of `Event` for handling arrival events.\n     *  The 'occur' method triggers future events and updates the current state.\n     *  @param customer  the entity that arrives, in this case a bank customer\n     *  @param delay     the time delay for this event's occurrence\n     */\n    case class Arrival (customer: Entity, delay: Double)\n         extends Event (customer, this, delay, t_ia_stat):\n\n        def occur (): Unit =\n            if nArr < nStop - 1 then\n                val toArrive = Entity (iArrivalRV.gen, serviceRV.gen, BankModel.this)\n                schedule (Arrival (toArrive, toArrive.iArrivalT))\n            end if\n            if nIn == 0 then\n                schedule (Departure (customer, customer.serviceT))\n            else   \n                waitQueue.enqueue (customer)                  // collects time in Queue statistics\n            end if\n            nArr += 1                                         // update the current state\n            nIn  += 1\n        end occur\n\n    end Arrival\n\n    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n    /** `Departure` is a subclass of `Event` for handling departure events.\n     *  The 'occur' method triggers future events and updates the current state.\n     *  @param customer  the entity that departs, in this case a bank customer\n     *  @param delay     the time delay for this event's occurrence\n     */\n    case class Departure (customer: Entity, delay: Double)\n         extends Event (customer, this, delay, t_s_stat):\n\n        def occur (): Unit =\n            leave (customer)                                  // collects time in sYstem statistics\n            if ! waitQueue.isEmpty then\n                val nextService = waitQueue.dequeue ()        // first customer in queue\n                schedule (Departure (nextService, nextService.serviceT))\n            end if\n            nIn  -= 1                                         // update the current state\n            nOut += 1\n        end occur\n\n    end Departure\n\n    //--------------------------------------------------\n    // Start the simulation after scheduling the first priming event\n\n    val firstArrival = Entity (iArrivalRV.gen, serviceRV.gen, this)\n    schedule (Arrival (firstArrival, firstArrival.iArrivalT))     // first priming event\n    simulate ()                                                   // start simulating\n\n    report ((\"nArr\", nArr), (\"nIn\", nIn), (\"nOut\", nOut))\n    reportStats ()\n    waitQueue.summary (nStop)\n\nend BankModel\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///Users/sdk/Desktop/my_scalation_2.0/src/main/scala/my_scalation/Ex_Bank.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/sdk/Desktop/my_scalation_2.0/src/main/scala/my_scalation/SampleStats.scala","languageId":"scala","version":1,"text":"\npackage my_scalation\n\nimport scalation.mathstat._\nimport scalation.random._\n\n// > runMain my_scalation.SampleStats\n\nobject SampleStats extends App:\n\n    val (mu, sig) = (70.0, 8.0)                               // population mean and standard deviation\n    val m      = 100                                          // sample size\n    val rvg    = Normal (mu, sig * sig)                       // Normal random variate generator\n    val sample = VectorD (for i <- 0 until m yield rvg.gen)   // sample from Normal distribution\n    val (mu_, sig_) = (sample.mean, sample.stdev)             // sample mean and standard deviation\n    println (s\"(mu_, sig_) = ($mu_, $sig_)\")\n    new Plot (null, sample)\n    new Histogram (sample)\n\nend SampleStats\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///Users/sdk/Desktop/my_scalation_2.0/src/main/scala/my_scalation/SampleStats.scala"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/sdk/Desktop/my_scalation_2.0/src/main/scala/my_scalation/ConfidenceIntervalTest.scala","languageId":"scala","version":1,"text":"\npackage my_scalation\n\nimport scala.math.sqrt\n\nimport scalation._\nimport scalation.mathstat._\nimport scalation.random._\n\n// > runMain my_scalation.ConfidenceIntervalTest\n\nobject ConfidenceIntervalTest extends App:\n\n    val (mu, sig) = (70.0, 8.0)                               // population mean and standard deviation\n    val m   = 100                                             // sample size\n    val rm  = sqrt (m)\n    val rvg = Normal (mu, sig * sig)                          // Normal random variate generator\n    var count_z, count_t = 0\n\n    for it <- 1 to 100 do                                     // test several datasets\n        val y = VectorD (for i <- 0 until m yield rvg.gen)    // sample from Normal distribution\n        val (mu_, sig_) = (y.mean, y.stdev)                   // sample mean and standard deviation\n\n        val ihw_z = z_sigma (sig_) / rm                       // interval half width: z-distribution\n        val ci_z  = (mu_ - ihw_z, mu_ + ihw_z)                // z-confidence interval\n        println (s\"mu = $mu in ci_z = $ci_z?\")\n        if mu in ci_z then count_z += 1\n\n        val ihw_t = t_sigma (sig_, m-1) / rm                  // interval half width: t-distribution\n        val ci_t  = (mu_ - ihw_t, mu_ + ihw_t)                // z-confidence interval\n        println (s\"mu = $mu in ci_t = $ci_t?\")\n        if mu in ci_t then count_t += 1\n    end for\n\n    println (s\"mu inside $count_z % z-confidence intervals\")\n    println (s\"mu inside $count_t % t-confidence intervals\")\n\nend ConfidenceIntervalTest\n\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, ♨3, shutdown, null})[0m
